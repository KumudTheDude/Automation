import pyautogui
import time
import json
import tkinter as tk
from tkinter import filedialog, messagebox
from pynput import mouse, keyboard

# Initialize global variables
events = []
num_clicks = 0
recording = False
pressed_keys = set()

def on_click(x, y, button, pressed):
    global recording
    if pressed:
        if button == mouse.Button.left:
            events.append(('left_click', (x, y), time.time()))
        elif button == mouse.Button.right:
            events.append(('right_click', (x, y), time.time()))
        print(f"Mouse clicked at ({x}, {y}) with {button}")
        if len([e for e in events if e[0] in ['left_click', 'right_click']]) >= num_clicks:
            recording = False
            return False

def on_scroll(x, y, dx, dy):
    events.append(('scroll', (x, y, dx, dy), time.time()))
    print(f"Mouse scrolled at ({x}, {y}) with delta ({dx}, {dy})")

def on_press(key):
    global pressed_keys
    if recording:
        key_str = None
        try:
            key_str = key.char
        except AttributeError:
            key_str = str(key)
        pressed_keys.add(key_str)
        events.append(('key_press', key_str, time.time()))
        print(f"Key pressed: {key_str}")

def on_release(key):
    global recording, pressed_keys
    if recording:
        key_str = None
        try:
            key_str = key.char
        except AttributeError:
            key_str = str(key)
        if key == keyboard.Key.esc:
            recording = False
            return False
        pressed_keys.discard(key_str)
        events.append(('key_release', key_str, time.time()))
        print(f"Key released: {key_str}")

def record_clicks_and_keys():
    global events, num_clicks, recording
    events = []

    try:
        num_clicks = int(num_clicks_entry.get())
    except ValueError:
        messagebox.showerror("Error", "Invalid number of clicks")
        return

    if num_clicks <= 0:
        messagebox.showerror("Error", "Number of clicks must be greater than 0")
        return

    messagebox.showinfo("Info", "Recording mouse clicks and keyboard events. Click the OK button and start clicking/typing. Press 'Esc' to stop recording.")

    recording = True
    start_time = time.time()

    try:
        with mouse.Listener(on_click=on_click, on_scroll=on_scroll) as mouse_listener, keyboard.Listener(on_press=on_press, on_release=on_release) as keyboard_listener:
            while recording:
                time.sleep(0.1)
            mouse_listener.stop()
            keyboard_listener.stop()
        recording = False
        messagebox.showinfo("Info", "Recording finished")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while recording clicks and keys: {e}")

    # Adjust timestamps relative to the start time
    events = [(event, data, timestamp - start_time) for event, data, timestamp in events]

def replay_clicks_and_keys():
    if not events:
        messagebox.showerror("Error", "No clicks or keys recorded or loaded")
        return

    try:
        delay = float(click_delay_entry.get())
        replay_times = int(replay_times_entry.get())
    except ValueError:
        messagebox.showerror("Error", "Invalid delay or replay times value")
        return

    for _ in range(replay_times):
        start_time = time.time()
        for event, data, event_time in events:
            time_to_wait = event_time + delay - (time.time() - start_time)
            if time_to_wait > 0:
                time.sleep(time_to_wait)
            if event == 'left_click':
                pyautogui.click(data)
            elif event == 'right_click':
                pyautogui.rightClick(data)
            elif event == 'scroll':
                pyautogui.scroll(data[2], data[0], data[1])
            elif event == 'key_press':
                if data.startswith("Key."):
                    pyautogui.keyDown(data.split('.')[1])
                else:
                    pyautogui.keyDown(data)
            elif event == 'key_release':
                if data.startswith("Key."):
                    pyautogui.keyUp(data.split('.')[1])
                else:
                    pyautogui.keyUp(data)

    messagebox.showinfo("Info", "Replay finished")

def save_clicks_and_keys_to_file():
    if not events:
        messagebox.showerror("Error", "No clicks or keys to save")
        return

    filename = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
    if filename:
        try:
            with open(filename, 'w') as file:
                json.dump(events, file)
            messagebox.showinfo("Info", f"Saved clicks and keys to {filename}")
        except IOError:
            messagebox.showerror("Error", f"Failed to save to {filename}")

def load_clicks_and_keys_from_file():
    global events
    filename = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
    if filename:
        try:
            with open(filename, 'r') as file:
                events = json.load(file)
            messagebox.showinfo("Info", f"Loaded clicks and keys from {filename}")
        except (IOError, json.JSONDecodeError):
            messagebox.showerror("Error", f"Failed to load from {filename}")

def load_and_replay_two_files():
    global events

    filenames = filedialog.askopenfilenames(filetypes=[("JSON files", "*.json")], title="Select two JSON files", multiple=True)
    if len(filenames) != 2:
        messagebox.showerror("Error", "Please select exactly two JSON files")
        return

    all_events = []

    for filename in filenames:
        try:
            with open(filename, 'r') as file:
                data = json.load(file)
                all_events.extend(data)
        except (IOError, json.JSONDecodeError):
            messagebox.showerror("Error", f"Failed to load from {filename}")
            return

    # Sort events by timestamp
    all_events.sort(key=lambda x: x[2])

    start_time = time.time()
    for event, data, event_time in all_events:
        time_to_wait = event_time - (time.time() - start_time)
        if time_to_wait > 0:
            time.sleep(time_to_wait)
        if event == 'left_click':
            pyautogui.click(data)
        elif event == 'right_click':
            pyautogui.rightClick(data)
        elif event == 'scroll':
            pyautogui.scroll(data[2], data[0], data[1])
        elif event == 'key_press':
            if data.startswith("Key."):
                pyautogui.keyDown(data.split('.')[1])
            else:
                pyautogui.keyDown(data)
        elif event == 'key_release':
            if data.startswith("Key."):
                pyautogui.keyUp(data.split('.')[1])
            else:
                pyautogui.keyUp(data)

    messagebox.showinfo("Info", "Replay of two files finished")

# GUI setup
root = tk.Tk()
root.title("Lund Lele Lala V-6.9")
root.configure(bg='black')

style = {
    'bg': 'black',
    'fg': 'white'
}

# Create and place widgets
tk.Label(root, text="Number of clicks to record:", **style).grid(row=0, column=0, padx=10, pady=10)
num_clicks_entry = tk.Entry(root, bg='white', fg='black')
num_clicks_entry.grid(row=0, column=1, padx=10, pady=10)
num_clicks_entry.insert(0, "5")

tk.Label(root, text="Delay between clicks (seconds):", **style).grid(row=1, column=0, padx=10, pady=10)
click_delay_entry = tk.Entry(root, bg='white', fg='black')
click_delay_entry.grid(row=1, column=1, padx=10, pady=10)
click_delay_entry.insert(0, "1")

tk.Label(root, text="Replay times:", **style).grid(row=2, column=0, padx=10, pady=10)
replay_times_entry = tk.Entry(root, bg='white', fg='black')
replay_times_entry.grid(row=2, column=1, padx=10, pady=10)
replay_times_entry.insert(0, "1")

tk.Button(root, text="Record", command=record_clicks_and_keys, **style).grid(row=3, column=0, columnspan=2, padx=10, pady=10)
tk.Button(root, text="Replay", command=replay_clicks_and_keys, **style).grid(row=4, column=0, columnspan=2, padx=10, pady=10)
tk.Button(root, text="Save", command=save_clicks_and_keys_to_file, **style).grid(row=5, column=0, padx=10, pady=10)
tk.Button(root, text="Load", command=load_clicks_and_keys_from_file, **style).grid(row=5, column=1, padx=10, pady=10)
tk.Button(root, text="Load and Replay Two Files", command=load_and_replay_two_files, **style).grid(row=6, column=0, columnspan=2, padx=10, pady=10)
tk.Button(root, text="Exit", command=root.quit, **style).grid(row=7, column=0, columnspan=2, padx=10, pady=10)

root.mainloop()


#When I multiply enter (Input) 25 as a value then it works fast but it stops for very long between loop (There is a lot of unnessary idle time)
#delay Entry ISsue, maybe one of these lines
#click_delay_entry = tk.Entry(root, bg='white', fg='black')
#click_delay_entry.grid(row=1, column=1, padx=10, pady=10)
# click_delay_entry.insert(0, "1")
# 

# 
# 
# 
# 
# #Sometimes when loaded it clicks at different coordinates, maybe its not saving coordinates correctly
